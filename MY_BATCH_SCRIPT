#!/bin/bash

#SBATCH --job-name=test             # Descriptive job name
#SBATCH -N 1                        # Request 1 node
#SBATCH --mem=100G                  # Request 100GB of memory
#SBATCH -t 135:50:00                # Maximum time limit
#SBATCH --gres=gpu:nvidia_a100_80:1 # Request 1 GPU (A100 80GB)
#SBATCH --partition=tier2_gpu       # GPU partition
#SBATCH --account=aristeidis_sotiras
#SBATCH --exclude=gpu02             # Exclude specific node(s)

#SBATCH --output=slurm-%A_%a.out    # Standard output file
#SBATCH --error=slurm-%A_%a.err     # Standard error file

# -----------------------------------------------------------------------------
# Load any required modules for CUDA/CuDNN (adjust if needed on your cluster)
module load cuda/11.3
module load cudnn/8.1.1

# -----------------------------------------------------------------------------
# Source Conda functionality
source /home/l.peiwang/miniconda3/etc/profile.d/conda.sh
eval "$(conda shell.bash hook)"

# Name of the conda environment
ENV_NAME="pasta_env_new_2025"

# (Optional) Prevent using packages in ~/.local/lib if you have pip conflicts
# export PYTHONNOUSERSITE=1

# -----------------------------------------------------------------------------
# Check if the environment already exists
conda env list | grep -q "$ENV_NAME"
ENV_EXISTS=$?

if [ $ENV_EXISTS -ne 0 ]; then
    echo "Conda environment '$ENV_NAME' does not exist. Creating it..."
    # Create the environment from your requirements.yaml
    conda env create -n "$ENV_NAME" --file /home/l.peiwang/PASTA/requirements.yaml
else
    echo "Conda environment '$ENV_NAME' already exists. Skipping creation."
fi

# Activate the environment
conda activate "$ENV_NAME"

# -----------------------------------------------------------------------------
# Quick checks (optional, but recommended)
echo "Using Python from: $(which python)"
python -c "import sys; print('Python version:', sys.version)"

# Validate PyTorch installation
python -c "import torch; print('PyTorch:', torch.__version__, 'CUDA available:', torch.cuda.is_available())"

# Validate TorchIO installation
python -c "import torchio; print('TorchIO:', torchio.__version__)"

# -----------------------------------------------------------------------------
# Run your training script
python /home/l.peiwang/PASTA/train_mri2pet.py \
    --data_dir /ceph/chpc/shared/aristeidis_sotiras_group/l.peiwang_scratch/datasets \
    --results_folder /ceph/chpc/shared/aristeidis_sotiras_group/l.peiwang_scratch/results \
    --eval_mode false \
    --synthesis false
